AWSTemplateFormatVersion: "2010-09-09"
Description:

    This template deploys a VPC, with a pair of public and private subnets spread

    across two Availability Zones. It deploys an Internet Gateway, with a default

    route on the public subnets. It deploys a pair of NAT Gateways (one in each AZ),

    and default routes for them in the private subnets.



Parameters:



    EnvironmentName:

        Description: An environment name that will be prefixed to resource names

        Type: String



    VpcCIDR:

        Description: Please enter the IP range (CIDR notation) for this VPC

        Type: String

        Default: 10.10.0.0/16



    PublicSubnet1CIDR:

        Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone

        Type: String

        Default: 10.10.10.0/24



    PublicSubnet2CIDR:

        Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone

        Type: String

        Default: 10.10.11.0/24



    PrivateSubnet1CIDR:

        Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone

        Type: String

        Default: 10.10.20.0/24



    PrivateSubnet2CIDR:

        Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone

        Type: String

        Default: 10.10.21.0/24



Resources:



    VPC:
        Type: AWS::EC2::VPC
        Properties:
            EnableDnsSupport: 'true'
            EnableDnsHostnames: 'true'
            CidrBlock: !Ref VpcCIDR
            Tags:
                - Key: Name
                  Value: !Ref EnvironmentName



    InternetGateway:

        Type: AWS::EC2::InternetGateway

        Properties:

            Tags:

                - Key: Name

                  Value: !Ref EnvironmentName



    InternetGatewayAttachment:

        Type: AWS::EC2::VPCGatewayAttachment

        Properties:

            InternetGatewayId: !Ref InternetGateway

            VpcId: !Ref VPC



    PublicSubnet1:

        Type: AWS::EC2::Subnet

        Properties:

            VpcId: !Ref VPC

            AvailabilityZone: !Select [ 0, !GetAZs '' ]

            CidrBlock: !Ref PublicSubnet1CIDR

            MapPublicIpOnLaunch: true

            Tags:

                - Key: Name

                  Value: !Sub ${EnvironmentName} Public Subnet (AZ1)



    PublicSubnet2:

        Type: AWS::EC2::Subnet

        Properties:

            VpcId: !Ref VPC

            AvailabilityZone: !Select [ 1, !GetAZs '' ]

            CidrBlock: !Ref PublicSubnet2CIDR

            MapPublicIpOnLaunch: true

            Tags:

                - Key: Name

                  Value: !Sub ${EnvironmentName} Public Subnet (AZ2)



    PrivateSubnet1:

        Type: AWS::EC2::Subnet

        Properties:

            VpcId: !Ref VPC

            AvailabilityZone: !Select [ 0, !GetAZs '' ]

            CidrBlock: !Ref PrivateSubnet1CIDR

            MapPublicIpOnLaunch: false

            Tags:

                - Key: Name

                  Value: !Sub ${EnvironmentName} Private Subnet (AZ1)



    PrivateSubnet2:

        Type: AWS::EC2::Subnet

        Properties:

            VpcId: !Ref VPC

            AvailabilityZone: !Select [ 1, !GetAZs '' ]

            CidrBlock: !Ref PrivateSubnet2CIDR

            MapPublicIpOnLaunch: false

            Tags:

                - Key: Name

                  Value: !Sub ${EnvironmentName} Private Subnet (AZ2)



    NatGateway1EIP:

        Type: AWS::EC2::EIP

        DependsOn: InternetGatewayAttachment

        Properties:

            Domain: vpc



    NatGateway2EIP:

        Type: AWS::EC2::EIP

        DependsOn: InternetGatewayAttachment

        Properties:

            Domain: vpc



    NatGateway1:

        Type: AWS::EC2::NatGateway

        Properties:

            AllocationId: !GetAtt NatGateway1EIP.AllocationId

            SubnetId: !Ref PublicSubnet1



    NatGateway2:

        Type: AWS::EC2::NatGateway

        Properties:

            AllocationId: !GetAtt NatGateway2EIP.AllocationId

            SubnetId: !Ref PublicSubnet2



    PublicRouteTable:

        Type: AWS::EC2::RouteTable

        Properties:

            VpcId: !Ref VPC

            Tags:

                - Key: Name

                  Value: !Sub ${EnvironmentName} Public Routes



    DefaultPublicRoute:

        Type: AWS::EC2::Route

        DependsOn: InternetGatewayAttachment

        Properties:

            RouteTableId: !Ref PublicRouteTable

            DestinationCidrBlock: 0.0.0.0/0

            GatewayId: !Ref InternetGateway



    PublicSubnet1RouteTableAssociation:

        Type: AWS::EC2::SubnetRouteTableAssociation

        Properties:

            RouteTableId: !Ref PublicRouteTable

            SubnetId: !Ref PublicSubnet1



    PublicSubnet2RouteTableAssociation:

        Type: AWS::EC2::SubnetRouteTableAssociation

        Properties:

            RouteTableId: !Ref PublicRouteTable

            SubnetId: !Ref PublicSubnet2





    PrivateRouteTable1:

        Type: AWS::EC2::RouteTable

        Properties:

            VpcId: !Ref VPC

            Tags:

                - Key: Name

                  Value: !Sub ${EnvironmentName} Private Routes (AZ1)



    DefaultPrivateRoute1:

        Type: AWS::EC2::Route

        Properties:

            RouteTableId: !Ref PrivateRouteTable1

            DestinationCidrBlock: 0.0.0.0/0

            NatGatewayId: !Ref NatGateway1



    PrivateSubnet1RouteTableAssociation:

        Type: AWS::EC2::SubnetRouteTableAssociation

        Properties:

            RouteTableId: !Ref PrivateRouteTable1

            SubnetId: !Ref PrivateSubnet1



    PrivateRouteTable2:

        Type: AWS::EC2::RouteTable

        Properties:

            VpcId: !Ref VPC

            Tags:

                - Key: Name

                  Value: !Sub ${EnvironmentName} Private Routes (AZ2)



    DefaultPrivateRoute2:

        Type: AWS::EC2::Route

        Properties:

            RouteTableId: !Ref PrivateRouteTable2

            DestinationCidrBlock: 0.0.0.0/0

            NatGatewayId: !Ref NatGateway2



    PrivateSubnet2RouteTableAssociation:

        Type: AWS::EC2::SubnetRouteTableAssociation

        Properties:

            RouteTableId: !Ref PrivateRouteTable2

            SubnetId: !Ref PrivateSubnet2



    NoIngressSecurityGroup:

        Type: AWS::EC2::SecurityGroup

        Properties:

            GroupName: "no-ingress-sg"

            GroupDescription: "Security group with no ingress rule"

            VpcId: !Ref VPC

    ELBWebSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupName: "elb-sg"
        VpcId: !Ref VPC
        GroupDescription: Enable HTTP & HTTPs access
        SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
        - CidrIp: 0.0.0.0/0
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443

    InstancesSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupName: "instance-sg"
        VpcId: !Ref VPC
        GroupDescription: Enable access from ELB
        SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref ELBWebSecurityGroup
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80

    MyLoadBalancer:
      Type: AWS::ElasticLoadBalancing::LoadBalancer
      Properties:
        LoadBalancerName: 'elb'
        Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        Listeners:
        - LoadBalancerPort: '80'
          InstancePort: '80'
          Protocol: HTTP
#        - LoadBalancerPort: '443'
#          InstancePort: '80'
#          Protocol: HTTPS
        HealthCheck:
          Target: HTTP:80/health-check
          HealthyThreshold: '3'
          UnhealthyThreshold: '5'
          Interval: '30'
          Timeout: '5'
        SecurityGroups:
          - !Ref ELBWebSecurityGroup
    MyApplicationloadBalancer:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        Name: 'alb'
#        Scheme: internal
        Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '50'
        SecurityGroups:
        - !Ref ELBWebSecurityGroup
        Tags:
        - Key: Name
          Value: alb

    ALBListener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        DefaultActions:
        - Type: forward
          TargetGroupArn:
            !Ref ALBTargetGroup
        LoadBalancerArn:
            !Ref MyApplicationloadBalancer
        Port: 80
        Protocol: HTTP

    ALBTargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        HealthCheckIntervalSeconds: 60
        UnhealthyThresholdCount: 10
        HealthCheckPath: /health-check
        Name: MyTargetGroup
        Port: 80
        Protocol: HTTP
        VpcId:
          !Ref VPC

    MyHostedZone:
      Type: "AWS::Route53::HostedZone"
      Properties:
        HostedZoneConfig:
          Comment: "My hosted zone for kuku.com"
        Name: "kuku.com"
        HostedZoneTags:
          -
            Key: "Name"
            Value: "kuku.com"

    MyPrivateHostedZone:
      Type: "AWS::Route53::HostedZone"
      Properties:
        VPCs:
          -
            VPCId: !Ref VPC
            VPCRegion: !Ref AWS::Region
        HostedZoneConfig:
          Comment: "My private hosted zone for riku.com"
        Name: "riku.com"
        HostedZoneTags:
          -
            Key: "Name"
            Value: "riku.com"


    MyELBAlias:
      Type: AWS::Route53::RecordSetGroup
      Properties:
        HostedZoneId: !Ref MyHostedZone
        Comment: Alias targeted to myELB LoadBalancer.
        RecordSets:
        - Name: elb.kuku.com.
          Type: A
          AliasTarget:
            HostedZoneId: !GetAtt MyLoadBalancer.CanonicalHostedZoneNameID
            DNSName: !GetAtt MyLoadBalancer.DNSName
        - Name: alb.kuku.com.
          Type: A
          AliasTarget:
            HostedZoneId: !GetAtt MyApplicationloadBalancer.CanonicalHostedZoneID
            DNSName: !GetAtt MyApplicationloadBalancer.DNSName

    MyPrivateELBAlias:
      Type: AWS::Route53::RecordSetGroup
      Properties:
        HostedZoneId: !Ref MyPrivateHostedZone
        Comment: Alias targeted to myELB LoadBalancer.
        RecordSets:
        - Name: elb.riku.com.
          Type: A
          AliasTarget:
            HostedZoneId: !GetAtt MyLoadBalancer.CanonicalHostedZoneNameID
            DNSName: !GetAtt MyLoadBalancer.DNSName
        - Name: alb.riku.com.
          Type: A
          AliasTarget:
            HostedZoneId: !GetAtt MyApplicationloadBalancer.CanonicalHostedZoneID
            DNSName: !GetAtt MyApplicationloadBalancer.DNSName


    MyIAMPolicy:
      Type: "AWS::IAM::ManagedPolicy"
      Properties:
        ManagedPolicyName: "ChallengePolicy"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: "Allow"
              Action:
                - "cloudformation:*"
                - "iam:*"
                - "elb:*"
                - "elasticloadbalancing:*"
                - "ce:*"
                - "ec2:*"
              Resource: "*"
        Users:
          -
            "alex-lab"



Outputs:



    VPC:

        Description: A reference to the created VPC

        Value: !Ref VPC



    PublicSubnets:

        Description: A list of the public subnets

        Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]]



    PrivateSubnets:

        Description: A list of the private subnets

        Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]]



    PublicSubnet1:

        Description: A reference to the public subnet in the 1st Availability Zone

        Value: !Ref PublicSubnet1



    PublicSubnet2:

        Description: A reference to the public subnet in the 2nd Availability Zone

        Value: !Ref PublicSubnet2



    PrivateSubnet1:

        Description: A reference to the private subnet in the 1st Availability Zone

        Value: !Ref PrivateSubnet1



    PrivateSubnet2:

        Description: A reference to the private subnet in the 2nd Availability Zone

        Value: !Ref PrivateSubnet2



    NoIngressSecurityGroup:

        Description: Security group with no ingress rule

        Value: !Ref NoIngressSecurityGroup




